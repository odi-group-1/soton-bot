//- Lists Products & services by Name -//

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
SELECT * WHERE { 
  GRAPH <http://id.southampton.ac.uk/dataset/amenities/latest> {
        ?Service a gr:ProductOrServicesSomeInstancesPlaceholder ;
                rdfs:label       ?Name .
     }
}

//- Lists Alcohol Offerings by Location URI -// 

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
SELECT * WHERE { 
  GRAPH <http://id.southampton.ac.uk/dataset/amenities/latest> {
        ?Offering a gr:Offering ;
                gr:availableAtOrFrom	?Location ;
                rdfs:label       "Alcohol" .
     }
}

//- Filter list by term -//

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
SELECT * WHERE { 
  GRAPH <http://id.southampton.ac.uk/dataset/amenities/latest> {
        ?Service a gr:ProductOrServicesSomeInstancesPlaceholder ;
                rdfs:label       ?Name ;
                FILTER (?Name = "Cigarettes") .
     }
}

//- Using filter to find: Where to buy cigarettes -//

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
SELECT * WHERE { 
  GRAPH <http://id.southampton.ac.uk/dataset/amenities/latest> {
        ?Offering a gr:Offering ;
                gr:availableAtOrFrom	?Location ;
                rdfs:label       ?Name ;
                FILTER (?Name = "Cigarettes") .
     }
}

// Change The word in the filter only to find where to get Cigarettes/Alcohol/etc.

//- Where can I get cigarettes or alcohol then use JS to find matching to know place where you can go to get both! -//

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gr: <http://purl.org/goodrelations/v1#>
SELECT * WHERE { 
  GRAPH <http://id.southampton.ac.uk/dataset/amenities/latest> {
        ?Offering a gr:Offering ;
                gr:availableAtOrFrom	?Location ;
                rdfs:label       ?Name ;
                FILTER (?Name = "Alcohol" || ?Name = "Cigarettes") .
     }
}

//---------------------------------------------

Using HTTP endpoint:
sparql.data.southampton.ac.uk?output=json&show_inline=0&query=

Add on the end:
PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0APREFIX+gr%3A+%3Chttp%3A%2F%2Fpurl.org%2Fgoodrelations%2Fv1%23%3E%0D%0ASELECT+DISTINCT+%3FLocation+%3FName+%0D%0AWHERE+%7B+%0D%0A++GRAPH+%3Chttp%3A%2F%2Fid.southampton.ac.uk%2Fdataset%2Famenities%2Flatest%3E+%7B%0D%0A++++++++%3FOffering+a+gr%3AOffering+%3B%0D%0A++++++++++++++++gr%3AavailableAtOrFrom%09%3FLocation+%3B%0D%0A++++++++++++++++rdfs%3Alabel+++++++%3FName+%3B%0D%0A++++++++++++++++FILTER+%28%3FName+%3D+%22Alcohol%22%29+.%0D%0A+++++%7D%0D%0A%7D

Important! Query length is potentially limited so remove all the +'s that appear because of pretty formating

PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0APREFIX+gr%3A+%3Chttp%3A%2F%2Fpurl.org%2Fgoodrelations%2Fv1%23%3E%0D%0ASELECT+DISTINCT+%3FLocation+%3FName+%0D%0AWHERE+%7B+%0D%0A++GRAPH+%3Chttp%3A%2F%2Fid.southampton.ac.uk%2Fdataset%2Famenities%2Flatest%3E+%7B%0D%0A+%3FOffering+a+gr%3AOffering+%3B%0D%0A+gr%3AavailableAtOrFrom%09%3FLocation+%3B%0D%0A+rdfs%3Alabel+%3FName+%3B%0D%0A+FILTER+%28%3FName+%3D+%22Alcohol%22%29+.%0D%0A+%7D%0D%0A%7D

Copy and past below into browser or postman etc.

sparql.data.southampton.ac.uk?output=json&show_inline=0&query=PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0APREFIX+gr%3A+%3Chttp%3A%2F%2Fpurl.org%2Fgoodrelations%2Fv1%23%3E%0D%0ASELECT+DISTINCT+%3FLocation+%3FName+%0D%0AWHERE+%7B+%0D%0A+GRAPH+%3Chttp%3A%2F%2Fid.southampton.ac.uk%2Fdataset%2Famenities%2Flatest%3E+%7B%0D%0A+%3FOffering+a+gr%3AOffering+%3B%0D%0A+gr%3AavailableAtOrFrom%09%3FLocation+%3B%0D%0A+rdfs%3Alabel+%3FName+%3B%0D%0A+FILTER+%28%3FName+%3D+%22Alcohol%22%29+.%0D%0A+%7D%0D%0A%7D

On returned data:

var results = //The returned JSON//.results.bindings;

var locations = [];

results.forEach(function (res){
	var location = res.Location.value;
	locations.push((location.replace("http://id.southampton.ac.uk/point-of-service/","")));
});

Example output:

Array[9]
0:"highfield-hall-bar"
1:"chamberlain-hall-bar"
2:"connaught-hall-bar"
3:"susu-stags"
4:"126-burgess-road"
5:"turner-sims-bar"
6:"163-university-road"
7:"the-crown-inn"
8:"unit1-citygateway"

//-------------------------------------------------------

PREFIX rdf: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?s ?p ?o FROM <http://id.southampton.ac.uk/dataset/places/latest> {
	?s ?p ?o ;
    FILTER(?o = "Building 32 is non-residential") .
}

Result:

S: http://id.southampton.ac.uk/building/32#residential	
P: http://www.w3.org/2000/01/rdf-schema#label	
O: Building 32 is non-residential

PREFIX rdf: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?s ?p ?o FROM <http://id.southampton.ac.uk/dataset/places/latest> {
	?s ?p ?o ;
    FILTER(?p = <http://www.w3.org/2000/01/rdf-schema#label>) .
}

Lists all the buildings!

//---------------- Where is building __ ---------------------

SELECT ?s ?p ?o FROM <http://id.southampton.ac.uk/dataset/places/latest> {
	?s ?p ?o ;
    FILTER(?s = <http://id.southampton.ac.uk/building/32> && 
           (?p = <http://www.w3.org/2003/01/geo/wgs84_pos#lat> || 
            ?p = <http://www.w3.org/2003/01/geo/wgs84_pos#long>)) .
}

//Change the building number from 32 to any building number needed


//---------------------------------------------

Find Lat, Long, Name and post code it's near of Food places!

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ns: <http://id.southampton.ac.uk/ns/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT * FROM <http://id.southampton.ac.uk/dataset/southampton-food-outlets/latest> WHERE {
  ?business a ns:FoodOrDrinkEstablishment ;
  	geo:lat ?lat ;
    geo:long ?long ;
  	rdfs:label ?name ;
  	foaf:based_near ?near .
}